# docker-compose-font-etl.yaml
name: font-etl          # project name shown by `docker compose ls`
version: "3.9"

########################################################################
# Shared volume ─ keeps data alive after containers exit
########################################################################
volumes:
  fontdata:             # docker volume create fontdata (once)

########################################################################
# 1️⃣ Download Adobe-VFR (≈ 23 GB zip → 25 GB unzip)
########################################################################
services:
  extract-adobe:
    image: python:3.11
    user: root                       # lets us write to the volume
    volumes:
      - fontdata:/data
      - ~/.kaggle:/root/.kaggle:ro   # kaggle.json for API token
    working_dir: /data
    command: >
      bash -c "
        set -e
        echo '[extract-adobe] Downloading…'
        kaggle datasets download -d luisgoncalo/adobe-visual-font-recognition \
               -p . --unzip
        mv adobe-visual-font-recognition AdobeVFR
        echo '[extract-adobe] Done:'; du -sh AdobeVFR
      "

########################################################################
# 2️⃣ Clone Google Fonts (≈ 1–2 GB, shallow clone)
########################################################################
  extract-gfonts:
    image: alpine/git:latest
    volumes:
      - fontdata:/data
    working_dir: /data
    command: >
      sh -c "
        set -e
        echo '[extract-gfonts] Cloning Google Fonts…'
        git clone --depth 1 https://github.com/google/fonts.git GoogleFonts
        echo '[extract-gfonts] Done:'; du -sh GoogleFonts
      "

########################################################################
# 3️⃣ Generate synthetic renders (only if you have the script)
########################################################################
  synth-gen:
    # build context contains generate_synthetic_images.py and a simple Dockerfile
    # that installs Pillow, freetype, etc.
    build: ./synthetic
    volumes:
      - fontdata:/data
    command: >
      python /workspace/generate_synthetic_images.py
             --fonts_dir /data/GoogleFonts
             --out_dir  /data/Synthetic
             --images_per_font 200
    depends_on:           # wait until both fonts are present
      - extract-adobe
      - extract-gfonts
    profiles: ["full"]    # run only with `--profile full` if you want

########################################################################
# 4️⃣ Push everything to Swift / S3 (optional)
########################################################################
  load-fonts:
    image: rclone/rclone:latest
    volumes:
      - fontdata:/data
      - ~/.config/rclone/rclone.conf:/root/.config/rclone/rclone.conf:ro
    environment:
      RCLONE_CONTAINER: fonts                         # set your Swift bucket
    entrypoint: /bin/sh
    command: -c '
        set -e
        echo "[load] Syncing to $RCLONE_CONTAINER …"
        rclone sync /data chi_tacc:$RCLONE_CONTAINER --progress
      '
    depends_on:
      - synth-gen          # or extract-gfonts if you skip the synthetic step
    profiles: ["full"]
