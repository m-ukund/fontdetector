# -----------------------------------------------------------------------------
# Unified ETL for Adobe-VFR + Google Fonts + synthetic renders → Swift
# -----------------------------------------------------------------------------
name: font-etl                # shown by `docker compose ls`
version: "3.9"

volumes:
  fontdata:                   # one persistent Docker volume

###############################################################################
# 1) EXTRACT  Adobe-VFR
###############################################################################
services:
  extract-adobe:
    image: python:3.11
    user: root
    volumes:
      - fontdata:/data
      - ~/.kaggle:/root/.kaggle:ro          # Kaggle token
    working_dir: /data
    command: >
      bash -c "
        set -e
        kaggle datasets download -d luisgoncalo/adobe-visual-font-recognition \
               -p . --unzip
        mv adobe-visual-font-recognition AdobeVFR
      "

###############################################################################
# 2) EXTRACT  Google Fonts (shallow clone)
###############################################################################
  extract-gfonts:
    image: alpine/git
    volumes:
      - fontdata:/data
    working_dir: /data
    command: >
      sh -c "
        set -e
        git clone --depth 1 https://github.com/google/fonts.git GoogleFonts
      "

###############################################################################
# 3) TRANSFORM  Generate synthetic renders (optional)
###############################################################################
  synth-gen:
    image: python:3.11
    volumes:
      - fontdata:/data
      - .:/workspace               # mount repo so the script is visible
    working_dir: /workspace
    command: >
      bash -c "
        pip install pillow tqdm freetype-py;
        python generate_synthetic_images.py \
          --fonts_dir /data/GoogleFonts \
          --out_dir  /data/Synthetic \
          --images_per_font 200
      "
    depends_on:
      extract-adobe:
        condition: service_completed_successfully
      extract-gfonts:
        condition: service_completed_successfully
    profiles: ["full"]            # run only with  --profile full

###############################################################################
# 4) LOAD  Push everything to Swift (persistent object storage)
###############################################################################
  load-fonts:
    image: rclone/rclone:latest
    volumes:
      - fontdata:/data
      - ~/.config/rclone/rclone.conf:/root/.config/rclone/rclone.conf:ro
    environment:
      - RCLONE_CONTAINER=${RCLONE_CONTAINER:?err}   # export before running!
    entrypoint: /bin/sh
    command: -c '
      set -e
      echo "[load] Syncing /data ➜ chi_tacc:$RCLONE_CONTAINER …"
      rclone sync /data chi_tacc:$RCLONE_CONTAINER --progress
    '
    depends_on:
      synth-gen:
        condition: service_completed_successfully
    profiles: ["full"]
